package main

import (
	"fmt"
	"strings"
)

type Operation struct {
	PC       int
	Op       string
	Start    int
	End      int
	Bytecode string
}

func main() {
	// Example bytecode input
	bytecode := "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80636352211e11610097578063b88d4fde11610066578063b88d4fde14610257578063c87b56dd1461026a578063cef6d3681461027d578063e985e9c5146102c357600080fd5b80636352211e1461021657806370a082311461022957806395d89b411461023c578063a22cb4651461024457600080fd5b806323b872dd116100d357806323b872dd1461018257806342842e0e146101955780634bc834eb146101a85780635afa3a72146101f557600080fd5b806301ffc9a71461010557806306fdde031461012d578063081812fc14610142578063095ea7b31461016d575b600080fd5b6101186101133660046112e7565b6102ff565b60405190151581526020015b60405180910390f35b610135610351565b6040516101249190611354565b610155610150366004611367565b6103e3565b6040516001600160a01b039091168152602001610124565b61018061017b36600461139c565b610470565b005b6101806101903660046113c6565b610585565b6101806101a33660046113c6565b6105b6565b6101d86101b6366004611367565b600960205260009081526040902080546001909101546001600160a01b031682565b604080519283526001600160a01b03909116602083015201610124565b61020861020336600461148e565b6105d1565b604051908152602001610124565b610155610224366004611367565b610715565b6102086102373660046114e7565b61078c565b610135610813565b610180610252366004611502565b610822565b61018061026536600461153e565b610831565b610135610278366004611367565b610869565b6101d861028b366004611367565b600090815260096020908152604091829020825180840190935280548084526001909101546001600160a01b03169290910182905291565b6101186102d13660046115ba565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061033057506001600160e01b03198216635b5e139f60e01b145b8061034b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060008054610360906115ed565b80601f016020809104026020016040519081016040528092919081815260200182805461038c906115ed565b80156103d95780601f106103ae576101008083540402835291602001916103d9565b820191906000526020600020905b8154815290600101906020018083116103bc57829003601f168201915b5050505050905090565b60006103ee826109df565b6104545760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061047b82610715565b9050806001600160a01b0316836001600160a01b0316036104e85760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161044b565b336001600160a01b0382161480610504575061050481336102d1565b6105765760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161044b565b61058083836109fc565b505050565b61058f3382610a6a565b6105ab5760405162461bcd60e51b815260040161044b90611627565b610580838383610b50565b61058083838360405180602001604052806000815250610831565b600080821161062d5760405162461bcd60e51b815260206004820152602260248201527f726f79616c6974792073686f756c64206265206265747765656e203020746f20604482015261031360f41b606482015260840161044b565b600a821061067d5760405162461bcd60e51b815260206004820152601c60248201527f726f79616c6974792073686f756c64206c657373207468617420313000000000604482015260640161044b565b61068b600780546001019055565b600061069660075490565b60408051808201825285815233602080830182815260008681526009909252939020915182559151600190910180546001600160a01b0319166001600160a01b039092169190911790559091506106ed9082610cf0565b6106f78185610d0a565b60085461070e906001600160a01b03166001610822565b9392505050565b6000818152600260205260408120546001600160a01b03168061034b5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161044b565b60006001600160a01b0382166107f75760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161044b565b506001600160a01b031660009081526003602052604090205490565b606060018054610360906115ed565b61082d338383610d8e565b5050565b61083b3383610a6a565b6108575760405162461bcd60e51b815260040161044b90611627565b61086384848484610e5c565b50505050565b6060610874826109df565b6108da5760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f72206044820152703737b732bc34b9ba32b73a103a37b5b2b760791b606482015260840161044b565b600082815260066020526040812080546108f3906115ed565b80601f016020809104026020016040519081016040528092919081815260200182805461091f906115ed565b801561096c5780601f106109415761010080835404028352916020019161096c565b820191906000526020600020905b81548152906001019060200180831161094f57829003601f168201915b50505050509050600061098a60408051602081019091526000815290565b9050805160000361099c575092915050565b8151156109ce5780826040516020016109b6929190611678565b60405160208183030381529060405292505050919050565b6109d784610e8f565b949350505050565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610a3182610715565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610a75826109df565b610ad65760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161044b565b6000610ae183610715565b9050806001600160a01b0316846001600160a01b03161480610b1c5750836001600160a01b0316610b11846103e3565b6001600160a01b0316145b806109d757506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff166109d7565b826001600160a01b0316610b6382610715565b6001600160a01b031614610bcb5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161044b565b6001600160a01b038216610c2d5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161044b565b610c386000826109fc565b6001600160a01b0383166000908152600360205260408120805460019290610c619084906116bd565b90915550506001600160a01b0382166000908152600360205260408120805460019290610c8f9084906116d0565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61082d828260405180602001604052806000815250610f66565b610d13826109df565b610d765760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b606482015260840161044b565b60008281526006602052604090206105808282611733565b816001600160a01b0316836001600160a01b031603610def5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161044b565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610e67848484610b50565b610e7384848484610f99565b6108635760405162461bcd60e51b815260040161044b906117f3565b6060610e9a826109df565b610efe5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161044b565b6000610f1560408051602081019091526000815290565b90506000815111610f35576040518060200160405280600081525061070e565b80610f3f8461109a565b604051602001610f50929190611678565b6040516020818303038152906040529392505050565b610f70838361119b565b610f7d6000848484610f99565b6105805760405162461bcd60e51b815260040161044b906117f3565b60006001600160a01b0384163b1561108f57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610fdd903390899088908890600401611845565b6020604051808303816000875af1925050508015611018575060408051601f3d908101601f1916820190925261101591810190611882565b60015b611075573d808015611046576040519150601f19603f3d011682016040523d82523d6000602084013e61104b565b606091505b50805160000361106d5760405162461bcd60e51b815260040161044b906117f3565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506109d7565b506001949350505050565b6060816000036110c15750506040805180820190915260018152600360fc1b602082015290565b8160005b81156110eb57806110d58161189f565b91506110e49050600a836118ce565b91506110c5565b60008167ffffffffffffffff81111561110657611106611402565b6040519080825280601f01601f191660200182016040528015611130576020820181803683370190505b5090505b84156109d7576111456001836116bd565b9150611152600a866118e2565b61115d9060306116d0565b60f81b818381518110611172576111726118f6565b60200101906001600160f81b031916908160001a905350611194600a866118ce565b9450611134565b6001600160a01b0382166111f15760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161044b565b6111fa816109df565b156112475760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161044b565b6001600160a01b03821660009081526003602052604081208054600192906112709084906116d0565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b0319811681146112e457600080fd5b50565b6000602082840312156112f957600080fd5b813561070e816112ce565b60005b8381101561131f578181015183820152602001611307565b50506000910152565b60008151808452611340816020860160208601611304565b601f01601f19169290920160200192915050565b60208152600061070e6020830184611328565b60006020828403121561137957600080fd5b5035919050565b80356001600160a01b038116811461139757600080fd5b919050565b600080604083850312156113af57600080fd5b6113b883611380565b946020939093013593505050565b6000806000606084860312156113db57600080fd5b6113e484611380565b92506113f260208501611380565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561143357611433611402565b604051601f8501601f19908116603f0116810190828211818310171561145b5761145b611402565b8160405280935085815286868601111561147457600080fd5b858560208301376000602087830101525050509392505050565b600080604083850312156114a157600080fd5b823567ffffffffffffffff8111156114b857600080fd5b8301601f810185136114c957600080fd5b6114d885823560208401611418565b95602094909401359450505050565b6000602082840312156114f957600080fd5b61070e82611380565b6000806040838503121561151557600080fd5b61151e83611380565b91506020830135801515811461153357600080fd5b809150509250929050565b6000806000806080858703121561155457600080fd5b61155d85611380565b935061156b60208601611380565b925060408501359150606085013567ffffffffffffffff81111561158e57600080fd5b8501601f8101871361159f57600080fd5b6115ae87823560208401611418565b91505092959194509250565b600080604083850312156115cd57600080fd5b6115d683611380565b91506115e460208401611380565b90509250929050565b600181811c9082168061160157607f821691505b60208210810361162157634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6000835161168a818460208801611304565b83519083019061169e818360208801611304565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561034b5761034b6116a7565b8082018082111561034b5761034b6116a7565b601f821115610580576000816000526020600020601f850160051c8101602086101561170c5750805b601f850160051c820191505b8181101561172b57828155600101611718565b505050505050565b815167ffffffffffffffff81111561174d5761174d611402565b6117618161175b84546115ed565b846116e3565b602080601f831160018114611796576000841561177e5750858301515b600019600386901b1c1916600185901b17855561172b565b600085815260208120601f198616915b828110156117c5578886015182559484019460019091019084016117a6565b50858210156117e35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061187890830184611328565b9695505050505050565b60006020828403121561189457600080fd5b815161070e816112ce565b6000600182016118b1576118b16116a7565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826118dd576118dd6118b8565b500490565b6000826118f1576118f16118b8565b500690565b634e487b7160e01b600052603260045260246000fdfea26469706673582212203242aca88639993106a02e463aa8eb2974844b325794910e65463ca273df33df64736f6c63430008190033"
	disassembledCode := disassembleBytecode(bytecode)

	fmt.Println("Disassembled Code:")
	for _, op := range disassembledCode {
		fmt.Printf("Offset: %d\tOpcode: %s\tStart: %d\tEnd: %d\tBytecode: %s\n", op.PC, op.Op, op.Start, op.End, op.Bytecode)
	}

	functionSelector := "e9198445"
	functionOffset := findFunctionOffset(disassembledCode, functionSelector)

	if functionOffset != -1 {
		fmt.Printf("\nFunction with selector %s found at offset %d\n", functionSelector, functionOffset)
		analyzeFunctionCode(disassembledCode, functionOffset)
	} else {
		fmt.Printf("\nFunction with selector %s not found\n", functionSelector)
	}

	functionCalls := findFunctionCalls(disassembledCode, functionSelector)
	if len(functionCalls) > 0 {
		fmt.Printf("\nFunction with selector %s is called at the following offsets:\n", functionSelector)
		for _, offset := range functionCalls {
			fmt.Printf("- Offset: %d\n", offset)
		}
	} else {
		fmt.Printf("\nNo calls to function with selector %s found\n", functionSelector)
	}
}

func isFunctionCall(opcode string) bool {
	// Check if the opcode represents a function call
	// You can expand this function to include more opcodes as needed
	return opcode == "63" || opcode == "61" || opcode == "62"
}

func disassembleBytecode(bytecode string) []Operation {
	code := strings.TrimSpace(bytecode)

	if strings.HasPrefix(bytecode, "0x") {
		code = code[2:]
	}

	if len(code)%2 != 0 {
		code = code[:len(code)-1]
	}
	if len(code)%2 != 0 {
		panic(fmt.Sprintf("disassembleBytecode - Bad input, bytecode length not even: %s, length: %d", code, len(code)))
	}

	offset := 0
	operations := splitBytecodePairs(code)
	disassembledOperations := make([]Operation, 0)

	for i := 0; i < len(operations); i++ {
		opcode := operations[i]
		operation := Operation{
			PC:       offset,
			Op:       opcode,
			Start:    offset * 2,
			End:      offset*2 + 2,
			Bytecode: bytecode[offset*2 : offset*2+2],
		}
		disassembledOperations = append(disassembledOperations, operation)
		offset++
	}
	return disassembledOperations
}

// Helper function

func splitBytecodePairs(bytecode string) []string {
	bytecodePairs := make([]string, 0)
	for i := 0; i < len(bytecode); i += 2 {
		bytecodePairs = append(bytecodePairs, bytecode[i:i+2])
	}
	return bytecodePairs
}

func extractFunctionCall(bytecode string, offset int) string {
	// Extract the function call based on the offset
	// This is a simple example and may need to be adjusted based on the specific bytecode structure
	functionCallLength := 8
	if offset+functionCallLength <= len(bytecode) {
		return bytecode[offset : offset+functionCallLength]
	}
	return ""
}

func findFunctionOffset(disassembledCode []Operation, functionSelector string) int {
	for _, op := range disassembledCode {
		if op.Bytecode == functionSelector {
			return op.PC
		}
	}
	return -1
}

func analyzeFunctionCode(disassembledCode []Operation, functionOffset int) {
	fmt.Println("Function Code:")
	for _, op := range disassembledCode {
		if op.PC >= functionOffset {
			fmt.Printf("- Offset: %d\tOpcode: %s\tBytecode: %s\n", op.PC, op.Op, op.Bytecode)
		}
	}
}

func findFunctionCalls(disassembledCode []Operation, functionSelector string) []int {
	functionCalls := []int{}
	for _, op := range disassembledCode {
		if op.Bytecode == functionSelector {
			functionCalls = append(functionCalls, op.PC)
		}
	}
	return functionCalls
}
